-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Builtins;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> sprintf ("%s", x)
    esac
  }
  
  case i of
    BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | SEXP   (s, n)    -> sprintf ("SEXP ""%s"", %d", s, n)
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  | STRING (s)       -> sprintf ("STRING ""%s""", s)
  | ARRAY  (n)       -> sprintf ("ARRAY %d", n)
  | STA              -> "STA"
  | ELEM             -> "ELEM"
  | BUILTIN (f, n)   -> sprintf ("BUILTIN %s, %d", f, n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});
  
  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac 
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, vl) {
    case loc of
      Arg (i) -> args[i] := vl
    | Loc (i) -> locs[i] := vl
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then vl else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval(cfg@[stack, cstk, state, world], instructions) {
    fun createLocal(stack, nargs, nlocs) {
      case take(stack, nargs) of
        [stack, values] -> case foldl(
          fun ([state, number], value) {
            state.assign(Arg(number), value);
            [state, number + 1]
          }, [makeState(nargs, nlocs), 0], values
        ) of
          [state, _] -> [stack, state]
        esac
      esac
    }


    case instructions of
        { }     -> cfg
      | he : ta -> case he of
          CONST (n)                  -> eval([n:stack, cstk, state, world], ta)
        | ST (x)                     -> state.assign(x, hd(stack)); eval(cfg, ta)
        | LD (x)                     -> eval([lookup(state, x):stack, cstk, state, world], ta)
        | BINOP (op)                 -> case stack of
          y : x : t -> eval([evalOp(op, x, y):t, cstk, state, world], ta)
        esac
        | JMP (l)                    -> eval(cfg, fromLabel(env, l))
        | CJMP (c, l)                -> case c of
            "z"  -> eval([tl(stack), cstk, state, world], if hd(stack) == 0 then fromLabel(env, l) else ta fi)
          | "nz" -> eval([tl(stack), cstk, state, world], if hd(stack) != 0 then fromLabel(env, l) else ta fi)
        esac
        | LABEL(_)                   -> eval(cfg, ta)
        | DROP                       ->
          case stack of
              { } -> eval([stack, cstk, state, world], ta)
            | _   -> eval([tl(stack), cstk, state, world], ta)
          esac
        | STI                        -> case stack of
          v : r : t -> state.assign(r, v); eval([v:t, cstk, state, world], ta)
        esac
        | LDA (x)                    -> eval([x:stack, cstk, state, world], ta)
        | DUP                        -> eval([hd(stack):stack, cstk, state, world], ta)
        | END                        -> case cstk of
            { }                     -> cfg
          | [oldStt, insntl] : cstk -> eval([stack, cstk, oldStt, world], insntl)
        esac
        | BEGIN(fname, nargs, nlocs) -> case createLocal(stack, nargs, nlocs) of
          [stack, state] -> eval([stack, cstk, state, world], ta)
        esac
        | CALL(fname, _)             -> eval([stack, [state, ta]:cstk, state, world], fromLabel(env, fname))
        | GLOBAL(x)                  -> state.assign(Glb(x), 0); eval(cfg, ta)
        | BUILTIN(flab, nargs)       -> case take(stack, nargs) of
          [stack, vals] -> case evalBuiltin(flab, vals, world) of
            [value, world] -> eval([value:stack, cstk, state, world], ta)
          esac
        esac
        | STRING (s)                 -> eval([s:stack, cstk, state, world], ta)
        | ARRAY (n)                  -> case take(stack, n) of
          [stack, vals] -> eval([listArray(vals):stack, cstk, state, world], ta)
        esac
        | ELEM                       -> case stack of
          index : name : stack -> eval([case name of
              Sexp(_, name) -> name[index]:stack
            | _             -> name[index]:stack
          esac, cstk, state, world], ta)
        esac
        | STA                        -> case stack of
          value : index : name : stack -> case name of
              Sexp(_, name) -> name[index] := value
            | _             -> name[index] := value
          esac; eval([value:stack, cstk, state, world], ta)
        esac
        | SEXP(name, n)              -> case take(stack, n) of
          [stack, vals] -> eval([Sexp(name, listArray(vals)):stack, cstk, state, world], ta)
        esac
      esac
    esac
  }


  eval([{ }, { }, makeState(0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function 
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a variable in the scope
  fun addVar(name) {
    if isGlobal()
      then makeCompEnv(nLabels, scopeDepth, addName(state, name, Glb(name, true)), nLocals, nArgs, functions)
      else makeCompEnv(nLabels, scopeDepth, addName(state, name, Loc(nLocals, true)), nLocals + 1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun(name, fLabel, nargs) {
    makeCompEnv(nLabels, scopeDepth, addName(state, name, Fun(fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun(state) {
    makeCompEnv(nLabels, 2, enterFunction(state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns() {
    [functions, makeCompEnv(nLabels, scopeDepth, state, nArgs, nLocals, { })]
  }

  -- Lookups variable
  fun lookupVar(name) {
    case lookup(state, name) of

        Loc (i, true) -> Loc(i)
      | Glb (x, true) -> Glb(x)
      | Arg (x)       -> Arg(x)
      | _             -> error(sprintf("the name ""%s"" does not designate a variable", name), getLoc(name))
    esac
  }

  -- Lookups a name of a function
  fun lookupFun(name) {
    case lookup(state, name) of
        x@Fun (_, _) -> x
      | _            -> error(sprintf("the name ""%s"" does not designate a function", name), getLoc(name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals() {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel(name) {
    if isGlobal()
      then [sprintf("L%s", name), makeCompEnv(nLabels, scopeDepth, state, nLocals, nArgs, functions)]
      else [sprintf("L%s_%d", name, nLabels), makeCompEnv(nLabels + 1, scopeDepth, state, nLocals, nArgs, functions)]
    fi
  }

  -- Checks if the current scope is a global
  fun isGlobal() {
    scopeDepth == 2
  }

  [genLabel,
    rememberFun,
    beginScope,
    endScope,
    addArg,
    addVar,
    beginFun,
    getFuns,
    lookupVar,
    lookupFun,
    getLocals,
    genFunLabel,
    addFun,
    isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv() {
  makeCompEnv(0, 0, emptyState(), 0, 0, { })
}

-- Accessor functions
fun genLabel(env) {
  env [0]()
}

fun rememberFun(env, name, args, body) {
  env [1](name, args, body)
}

fun beginScope(env) {
  env [2]()
}

fun endScope(env) {
  env [3]()
}

fun addArg(env, name) {
  env [4](name)
}

fun addVar(env, name) {
  env [5](name)
}


fun beginFun(env, state) {
  env [6](state)
}

fun getFuns(env) {
  env [7]()
}

fun lookupVar(env, name) {
  env [8](name)
}

fun lookupFun(env, name) {
  env [9](name)
}

fun getLocals(env) {
  env [10]()
}

fun genFunLabel(env, name) {
  env [11](name)
}

fun addFun(env, name, fLabel, nargs) {
  env [12](name, fLabel, nargs)
}

fun isGlobal(env) {
  env [13]()
}

-- Helper function: generates n labels
fun genLabels(env, n) {
  fun inner(env, n) {
    if n == 0
      then { env }
      else case genLabel(env) of
        [lab, env] -> lab:inner(env, n - 1)
      esac
    fi
  }

  listArray(inner(env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs(env, names) {
  foldl(fun (env, name) { addArg(env, name) }, env, names)
}

-- Helper function: adds a bunch of local variables
fun addVars(env, names) {
  foldl(fun (env, name) { addVar(env, name) }, env, names)
}


-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.


-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM(stmt) {

  fun compileArgs(argsLab, env, args) {
    compile(argsLab, env, foldl(
      fun (stmt, arg) {
        Seq(stmt, arg)
      }, Skip, args
    ))
  }

  fun addDefs(env, defs) {
    fun tryAddGlobalNames(env, globals, names) {
      if isGlobal(env) then
        foldl(fun (buffer, name) {
          buffer <+ GLOBAL(name)
        }, globals, names)
        else
          globals
      fi
    }

    var result = foldl(fun ([env, globals, functions], def) {
      case def of
          Var(x)                -> case addVars(env, x) of
            env -> [env, tryAddGlobalNames(env, globals, x), functions]
          esac
        | Fun(name, args, body) -> case genFunLabel(env, name) of
          [label, env] -> [addFun(env, name, label, size(args)), globals, [label, args, body]:functions]
        esac
      esac
    }, [env, emptyBuffer(), { }], defs);
    case result of
      [env, globals, functions] ->
        [foldl(fun (env, [label, args, body]) {
          rememberFun(env, label, args, body)
        }, env, functions), globals]
    esac
  }

  fun label(lab, labUsed) {
    if labUsed
      then singletonBuffer(LABEL(lab))
      else emptyBuffer()
    fi
  }

  fun compile(lab, env, stmt) {
    case stmt of
        Skip                           -> [false, env, emptyBuffer()]
      | Var    (x)                     -> [false, env, singletonBuffer(LD(lookupVar(env, x)))]
      | Ref    (x)                     -> [false, env, singletonBuffer(LDA(lookupVar(env, x)))]
      | Const  (n)                     -> [false, env, singletonBuffer(CONST(n))]
      | String (x)                     -> [false, env, singletonBuffer(STRING(x))]
      | Array (vals)                   -> case genLabel(env) of
        [genLabel, env] -> case compileArgs(genLabel, env, vals) of
          [genLabelUsed, env, code] -> [false, env, code <+> label(genLabel, genLabelUsed) <+ ARRAY(size(vals))]
        esac
      esac
      | Elem(name, index)              ->
        case
          genLabel(env) of
          [sArrayLab, env] -> case compileArgs(sArrayLab, env, { name, index }) of
            [sArrrayLabUsed, env, code] -> [false, env, code <+> label(sArrayLab, sArrrayLabUsed) <+ ELEM]
          esac
        esac
      | ElemRef(name, index)           -> -- Can we be here?
        case
          genLabel(env) of
          [sArrayLab, env] -> case compileArgs(sArrayLab, env, { name, index }) of
            [sArrrayLabUsed, env, code] -> [false, env, code <+> label(sArrayLab, sArrrayLabUsed)]
          esac
        esac
      | Sexp(name, vals)               -> case genLabel(env) of
        [sSexpLab, env] -> case compileArgs(sSexpLab, env, vals) of
          [sSexpLabUsed, env, code] -> [false, env, code <+> label(sSexpLab, sSexpLabUsed) <+ SEXP(name, size(vals))]
        esac
      esac
      | Set(x, e)                      -> compile(lab, env, Assn(Ref(x), e))
      | Assn  (leftExpr, rightExpr)    -> case genLabels(env, 2) of
        [genLabLeft, genLabRight, env] -> case compile(genLabLeft, env, leftExpr) of
          [sLeftExprLabUsed, env, sLeftCode] ->
            case compile(genLabRight, env, rightExpr) of
              [sRightExprLabUsed, env, sRightCode] -> [false, env, sLeftCode <+> label(genLabLeft, sLeftExprLabUsed) <+> sRightCode <+> label(genLabRight, sRightExprLabUsed) <+
                case leftExpr of
                    ElemRef(_, _) -> STA
                  | _             -> STI
                esac]
            esac
        esac
      esac
      | Seq   (exLeft, exRight)        ->
        case genLabel(env) of
          [genLabInner, env] ->
            case compile(genLabInner, env, exLeft) of
              [s2LabUsed, env, sLeftCode] ->
                case compile(lab, env, exRight) of
                  [labUsed, env, sRightCode] -> [labUsed, env, sLeftCode <+> label(genLabInner, s2LabUsed) <+> sRightCode]
                esac
            esac
        esac
      | If (cond, exTrue, exFalse)     ->
        case genLabels(env, 2) of
          [genLabCond, genLabExpr, env] ->
            case compile(genLabCond, env, cond) of
              [sCondLabUsed, env, sCondCode] ->
                case compile(lab, env, exTrue) of
                  [s1LabUsed, env, exTrueCode] -> case compile(lab, env, exFalse) of
                    [s2LabUsed, env, exFalseCode] -> [true, env, sCondCode <+> label(genLabCond, sCondLabUsed) <+ CJMP("z", genLabExpr) <+> exTrueCode <+ JMP(lab) <+> label(genLabExpr, true) <+> exFalseCode]
                  esac
                esac
            esac
        esac
      | While(cond, ex)                ->
        case genLabels(env, 2) of
          [genLabCond, genLabExpr, env] ->
            case compile(genLabCond, env, cond) of
              [sCondLabUsed, env, sCondCode] ->
                case compile(genLabExpr, env, ex) of
                  [sExprLabUsed, env, s1Code] -> [sExprLabUsed, env, label(genLabExpr, true) <+> sCondCode <+> label(genLabCond, sCondLabUsed) <+ CJMP("z", lab) <+> s1Code <+ JMP(genLabExpr) <+> label(lab, true)]
                esac
            esac
        esac
      | DoWhile(ex, cond)              ->
        case genLabels(env, 2) of
          [genLabCond, genLabExpr, env] ->
            case compile(lab, env, ex) of
              [sExprLabUsed, env, sExprCode] ->
                case compile(genLabCond, env, cond) of
                  [sCondLabUsed, env, sCondCode] -> [sExprLabUsed, env, label(genLabExpr, true) <+> sExprCode <+> sCondCode <+> label(genLabCond, sCondLabUsed) <+ CJMP("nz", genLabExpr)]
                esac
            esac
        esac
      | Ignore (ex)                    ->
        case genLabel(env) of
          [genLab1, env] ->
            case compile(lab, env, ex) of
              [s1LabUsed, env, s1Code] -> [false, env, s1Code <+> label(genLab1, s1LabUsed) <+ DROP]
            esac
        esac
      | Binop(op, leftExpr, rightExpr) ->
        case genLabel(env)
        of [genLabAfter, env] -> case compile(genLabAfter, env, Seq(leftExpr, rightExpr)) of
          [sLabAfterUsed, env, opCode] -> [false, env, opCode <+> label(genLabAfter, sLabAfterUsed) <+ BINOP(op)]
        esac
        esac
      | Scope(defs, expr)              -> case beginScope(env) of
        env ->
          case addDefs(env, defs) of
            [env, globals] -> case compile(lab, env, expr) of
              [sLabUsed, env, opCode] -> [sLabUsed, endScope(env), globals <+> opCode]
            esac
          esac
      esac
      | Call(name, args)               -> case lookupFun(env, name) of
        Fun(fLab, nargs) -> case genLabel(env) of
          [argsLab, env] -> case compileArgs(argsLab, env, args) of
            [argsLabUsed, env, code] -> [false, env, code <+> label(argsLab, argsLabUsed) <+
              case fLab of
                External (fLab) -> BUILTIN(fLab, nargs)
                | _              -> CALL(fLab, nargs)
              esac]
          esac
        esac
      esac
    esac
  }

  fun addAllFunctionsBodies(env, code, finalLabCode) {
    var mainFunctionCode =
      singletonBuffer(LABEL("main"))
        <+ BEGIN("main", 0, getLocals(env))
        <+> code
        <+> finalLabCode
        <+ END;
    case getFuns(env) of [functions, env] ->
      foldl(fun ([env, code], f@Fun(fLabel, args, body, state)) {
        case genLabel(addArgs(beginFun(env, state), args)) of
          [endFunLab, env] -> case compile(endFunLab, env, body) of
            [endFunLabUsed, env, bodyCode] -> [env, code <+ LABEL(fLabel) <+ BEGIN(fLabel, size(args), getLocals(env)) <+> bodyCode <+> label(endFunLab, endFunLabUsed) <+ END]
          esac
        esac
      }, [env, mainFunctionCode], functions)[1]
    esac
  }
  case initCompEnv().beginScope.addFun("read", External("read"), 0)
    .addFun("write", External("write"), 1)
    .addFun("length", External("length"), 1).genLabel of
    [endLab, env] ->
      case compile(endLab, env, stmt) of
        [endLabUsed, env, code] -> getBuffer $ addAllFunctionsBodies(env, code, label(endLab, endLabUsed))
      esac
  esac
}
