-- Expression evaluator

import List;
import Array;
import State;
import World;
import Builtins;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+", infix +],
  ["-", infix -],
  ["*", infix *],
  ["/", infix /],
  ["%", infix %],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Scope   (def list, expr)     |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

fun addDefinitions(state, defs) {
  foldl(fun (cstate, def) {
    case def of
        Var(x)                -> addNames(cstate, x)
      | Fun(name, args, body) -> addFunction(cstate, name, args, body)
    esac
  }, state, defs)
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval(c@[state, world], expr) {
  case expr of
     Set(name, value)             -> eval(c, Assn(Ref(name), value))
    | Assn (exL, exR)              -> case evalList(c, { exL, exR }) of
      [c@[state, world], { n, v }] ->
        case n of
            ElemRef(name, index) -> [c, name[index] := v]
          | _                    -> [[state <- [n, v], world], v]
        esac
    esac
    | Seq (ex1, ex2)               -> case evalList(c, { ex1, ex2 }) of
      [c, { _, v }] -> [c, v]
    esac
    | Skip                         -> [c, Void]
    | cycle@(While (exIf, exBody)) -> case eval(c, exIf) of
        [c, 0] -> [c, Void]
      | [c, _] -> case eval(c, exBody) of
        [c, _] -> eval(c, cycle)
      esac
    esac
    | If(exIf, exTrue, exFalse)    -> case eval(c, exIf) of
        [c, 0] -> eval(c, exFalse)
      | [c, _] -> eval(c, exTrue)
    esac
    | DoWhile (exBody, exIf)       -> case eval(c, exBody) of
      [c, _] -> eval(c, While(exIf, exBody))
    esac
    | Var(v)                       -> [c, lookup(state, v)]
    | Ref (x)                      -> [c, x]
    | Const (n)                    -> [c, n]
    | Binop (op, ex1, ex2)         -> case evalList(c, { ex1, ex2 }) of
      [cc, { a, b }] -> [cc, evalOp(op, a, b)]
    esac
    | Ignore (ex)                  -> case eval(c, ex) of
      [c, _] -> [c, Void]
    esac
    | Scope(defs, expr)            -> case enterScope(state) of
      state -> case addDefinitions(state, defs) of
        state -> case eval([state, world], expr) of
          [[state, world], value] -> [[leaveScope(state), world], value]
        esac
      esac
    esac
    | Array(exprs)                 -> case evalList(c, exprs) of
      [c, vals] -> [c, listArray(vals)]
    esac
    | Elem(name, index)            -> case evalList(c, { name, index }) of
      [c, { name, index }] -> case name of
          Sexp(_, name) -> [c, name[index]]
        | _             -> [c, name[index]]
      esac
    esac
    | ElemRef(name, index)         -> case evalList(c, { name, index }) of
      [c, { name, index }] -> case name of
          Sexp(_, name) -> [c, ElemRef(name, index)]
        | _             -> [c, ElemRef(name, index)]
      esac
    esac
    | String(s)                    -> [c, s]
    | Sexp(name, exprs)            -> case evalList(c, exprs) of
      [c, exprs] -> [c, Sexp(name, listArray(exprs))]
    esac
    | Call(name, args)             -> case lookup(state, name) of
      Fun(funargs, body) -> case body of
          External ->
            case evalList(c, args) of
              [[state, world], vals] -> case evalBuiltin(name, vals, world) of
                [value, world] -> [[state, world], value]
              esac
            esac
        | _        -> case evalList(c, args) of
          [[stBefore, world], vals] -> case enterFunction(stBefore) of
            stAfter -> case foldl(fun (state, [ref, value]) {
              addName(state, ref, value)
            }, stAfter, zip(funargs, vals)) of
              stAfter -> case eval([stAfter, world], body) of
                [[stAfter, world], value] -> [[leaveFunction(stBefore, getGlobal(stAfter)), world], value]
              esac
            esac
          esac
        esac
      esac
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
