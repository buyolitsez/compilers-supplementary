-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval(c@[st, w], expr) {
  case expr of
      Assn (exL, exR)              -> case evalList(c, { exL, exR }) of
        [c@[st, w], { Ref(n), Val(v) }] -> [[st <- [n, v], w], Val(v)]
      esac
    | Seq (ex1, ex2)               -> case evalList(c, { ex1, ex2 }) of
      [c, { _, v }] -> [c, v]
    esac
    | Skip                         -> [c, Void]
    | Read (n)                     -> case readWorld(w) of
      [v, wf] -> [[st <- [n, v], wf], Void]
    esac
    | Write (ex)                   -> case eval(c, ex) of
      [[st, w], Val(v)] -> [[st, writeWorld(v, w)], Void]
    esac
    | If(exIf, exTrue, exFalse)    -> case eval(c, exIf) of
        [c, Val(0)] -> eval(c, exFalse)
      | [c, Val(_)] -> eval(c, exTrue)
    esac
    | cycle@(While (exIf, exBody)) -> case eval(c, exIf) of
        [c, Val(0)] -> [c, Void]
      | [c, Val(_)] -> case eval(c, exBody) of
        [c, _] -> eval(c, cycle)
      esac
    esac
    | DoWhile (exBody, exIf)       -> case eval(c, exBody) of
      [c, _] -> eval(c, While(exIf, exBody))
    esac
    | Var   (x)                    -> [c, Val(st(x))]
    | Ref (x)                      -> [c, Ref(x)]
    | Const (n)                    -> [c, Val(n)]
    | Binop (op, ex1, ex2)         -> case evalList(c, { ex1, ex2 }) of
      [cc, { Val(a), Val(b) }] -> [cc, Val(evalOp(op, a, b))]
    esac
    | Ignore (ex)                  -> case eval(c, ex) of
      [c, _] -> [c, Void]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
